! a portfolio's approximation

here's the software i maintain or have maintained for some time, as a rough
chronology:

+ a fork of amp, a text editor written in rust (the actual maintainer was
only sporadically merging and reviewing pull requests. i forked to maintain it
myself and add new features for as long as i was using the editor, ultimately
leaving it aside when i switched text editors a year or so later.) i would link
this, but the fork is under my deadname.

+ painted, a notification daemon for desktop linux. there's nothing particularly
special about this, but i wanted a notification daemon, so i read the dbus
specs and got to work.

>https://github.com/atalii/painted i use this daily.

+ gemasmref, a simultaneous experiment with the gemini protocol (roughly a smol
web version of HTTP), the prolog language, and x86 assembly. it's a prolog
application that ran a gemini server which allowed searching through an x86
instruction reference. i ended up not needing it, so it's sitting mostly
untouched and presumably unused on github.

+ systemgmi, another gemini server, this time written in C, that displays
system statistics and systemd-based metrics. this was originally written for my
raspberry pi home server, but i've shifted around the home server situation a
lot since then, and the new server runs alpine linux. there's not much
opportunity to use this anymore, alas. it was, however, a great exploration of
unix's networking primitives, and, surprisingly, the UTF-8 encoding. it also
lead me into systemd's code to fix some erroneous documentation, a fix which
was eventually merged.

+ a lisp-like CLI calculator in x86 assembly. this was *fun*. i did this over a
subset of a winter break and never ended up finishing it, but i had a great
time. at the end, i had what was roughly an RPN calculator capable of limited
variable storage written entirely in assembly with no libc. of course, nothing
as crazy as sectorlisp, but fun nonetheless.

+ some unmerged and abandoned stuff for python's urllib. urllib.parse had its
behavior defined by hard-coded URL-schemes. i did some prototypes of fixes to
generalize the behavior, but those ended up falling through as life combined
with the churn around urllib. i'd like to come back to this eventually.

+ stlsc.nix, a nix derivation to create self-signed TLS certificates with
terrible security properties. this is actually really helpful for just getting
a throwaway cert as quickly as possible for dev environments. i still use and
maintain this from time to time.

+ y86-exe, a runtime/interpreter for the y86 assembly language written in C.
this was the final project for my computer systems class, which had us digging
into nearly everything between endianness and memory management.

+ ac-mon, a server that monitors the status of the online classrooms at my
school and makes troubleshooting the network ghosts just a bit easier. i split
the frontend and backend with a friend. the frontend is some type of
single page web app that talks to my api. my api is built on a number of
terrifying hacks, including parsing javascript with a regular expression and
intercepting RPC calls over websockets. despite that, it works more reliably
than that which it monitors, so i'd call it a success.

>https://github.com/atalii/ac-mon also, it's not written under my deadname, so
here's the source.

+ ohs-rcv, a little script to calculate the ranked-choice elections used for
student government. this read through the data produced by the qualtrics ballot
forms and saved a friend on student government some amount of frustration. this
is also on github, but not any more than a hundred lines, so it's not really
worth linking.

+ pronouns.within.lgbt, a web service that lists neopronouns. i contributed
core code for the query interface and collaborated with the maintainer to fix
high memory usage in production.

>https://github.com/xe/pronouns/ here's the code

>https://pronouns.within.lgbt/ and here's the website

+ adage, a sudo replacement written in ada. this was originally supposed to be
a fun exploration into ada like gemasmref was for prolog, but it turns out that
ada is an incredible programming language. it's all the things i wished c++
was, without templates and without hours-long compile times. adage itself is a
simple little unix utility, and more comparable to doas than to sudo, but the
temptation of formal verification on that codebase makes it genuinely appealing
as a proper alternative in my eyes.

>https://github.com/atalii/adage check out the source

+ argon2-ada, a binding for the argon2 KDF for ada. translating the C-isms in
libargon2 to Ada was (and is) really quite fun. combining the type-level
guarantees the bindings inherently provide with some formal verification later
down the line should make this a robust little library.

>https://github.com/atalii/argon2-ada and here's the source

+ i help maintain nixpkgs, the primary package set for the nix package manager.
i try to review roughly one pull request per week to help keep everything running
smoothly. i'm also the maintainer for the alire package, which is a fairly
essential part of writing modern open source ada code. i'm currently working on
getting some more substantial support of the ada language and alire ecosystem
into nixpkgs. i've nothing specific to link here as of yet, but hopefully i'll
have something soon (by the time a college admissions officer reads this? who
knows!).

+ i may as well also list this website, which has a few good hacks going for
it. it's written ground-up in C, utilizing libraries just for HTTP and to read
the data archive. (fine, it uses libc, too.)

>/meta-blog i wrote a longer piece about the lovely little mess that is this
website, and the source is linked in the footer.

_

with that, i think that's most of the code i've written over the past few
years. this is definitely not everything; it notably doesn't include my smaller
contributions to open source libraries i've depended on in the past, and it
doesn't include the small things i never really saw through or that never left
my hard drive, but it reads as a good-enough encapsulation of the types of
eccentricities i like to play with. thanks for getting through all this :)
